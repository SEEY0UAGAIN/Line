/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Pharmacy Queue Monitor (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö code ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó)
 * ‡∏£‡∏±‡∏ô: node testPharmacyMonitor.js
 */
const sqlServer = require('mssql');
const { queryDB1, queryDB2, queryDB3 } = require('./db');
const { sendLineMessage } = require('./utils/lineNotify');
const { logEvent } = require('./auditLog');
require('dotenv').config();

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å code.txt (‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö) =====

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤‡∏à‡∏≤‡∏Å SSB (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö code ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó - drug.txt conditions)
 */
async function fetchPharmacyQueueFromSSB() {
  try {
    const sql = `
      SELECT DISTINCT 
        HNOPD_MASTER.VN,
        HNOPD_MASTER.HN,
        HNOPD_PRESCRIP.DrugAcknowledge,
        HNOPD_PRESCRIP.DrugReady,
        HNOPD_PRESCRIP_MEDICINE.StockCode,
        HNOPD_PRESCRIP_MEDICINE.FacilityRequestMethod,
        HNOPD_PRESCRIP.CloseVisitCode,
        HNOPD_PRESCRIP.ApprovedByUserCode,
        HNOPD_RECEIVE_HEADER.ReceiptNo,
        HNOPD_MASTER.OutDateTime,
        SUBSTRING(dbo.HNPAT_NAME.FirstName, 2, 100) + ' ' + SUBSTRING(dbo.HNPAT_NAME.LastName, 2, 100) AS PatientName,
        HNOPD_PRESCRIP.Clinic,
        (SELECT ISNULL(SUBSTRING(LocalName, 2, 1000), SUBSTRING(EnglishName, 2, 1000))
         FROM DNSYSCONFIG 
         WHERE CtrlCode = '42203' AND code = HNOPD_PRESCRIP.Clinic) AS ClinicName,
        CASE 
          WHEN HNOPD_PRESCRIP.DrugAcknowledge=1 AND HNOPD_PRESCRIP.DrugReady=0 AND HNOPD_PRESCRIP_MEDICINE.StockCode != 'NODRUG' AND HNOPD_PRESCRIP_MEDICINE.FacilityRequestMethod IS NULL THEN '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤'
          WHEN HNOPD_PRESCRIP.DrugAcknowledge=1 AND HNOPD_PRESCRIP.DrugReady=1 AND HNOPD_PRESCRIP_MEDICINE.StockCode != 'NODRUG' AND HNOPD_PRESCRIP_MEDICINE.FacilityRequestMethod IS NULL THEN '‡∏à‡∏±‡∏î‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
          ELSE '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤'
        END AS MedicineStatus
      FROM HNOPD_MASTER WITH (NOLOCK)
      LEFT OUTER JOIN HNOPD_PRESCRIP 
        ON HNOPD_MASTER.VisitDate=HNOPD_PRESCRIP.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_PRESCRIP.VN
      LEFT OUTER JOIN HNOPD_RECEIVE_HEADER 
        ON HNOPD_MASTER.VisitDate=HNOPD_RECEIVE_HEADER.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_RECEIVE_HEADER.VN
      LEFT OUTER JOIN HNOPD_PRESCRIP_MEDICINE 
        ON HNOPD_PRESCRIP.VisitDate=HNOPD_PRESCRIP_MEDICINE.VisitDate 
        AND HNOPD_PRESCRIP.VN=HNOPD_PRESCRIP_MEDICINE.VN 
        AND HNOPD_PRESCRIP.PrescriptionNo=HNOPD_PRESCRIP_MEDICINE.PrescriptionNo
      LEFT OUTER JOIN HNPAT_NAME 
        ON HNOPD_MASTER.HN=HNPAT_NAME.HN
      WHERE HNOPD_MASTER.Cxl=0
        AND CONVERT(DATE, HNOPD_MASTER.VisitDate) = CONVERT(DATE, GETDATE())
        AND (SELECT ISNULL(SUBSTRING(LocalName, 2, 1000), SUBSTRING(EnglishName, 2, 1000))
             FROM DNSYSCONFIG 
             WHERE CtrlCode = '42203' AND code = HNOPD_PRESCRIP.Clinic) NOT LIKE '%SC%'
        AND HNOPD_PRESCRIP.Clinic NOT IN ('99994','150043','SCKTB','999911','14009','150042','99999')
        AND HNOPD_MASTER.OutDateTime IS NULL
        AND HNOPD_PRESCRIP.CloseVisitCode IS NOT NULL
        AND HNOPD_PRESCRIP.CloseVisitCode NOT IN ('ADM','C01','C02','C03','C04','C05','C06','C07','C08','C09','C10','C11','C12','C13','C14','C15')
        AND HNOPD_RECEIVE_HEADER.ReceiptNo IS NULL
        AND HNOPD_PRESCRIP_MEDICINE.CxlDateTime IS NULL
        AND HNPAT_NAME.SuffixSmall=0
        AND HNOPD_PRESCRIP.ApprovedByUserCode IS NOT NULL
        AND HNOPD_PRESCRIP.DrugAcknowledge=1
    `;

    const rows = await queryDB1(sql);
    return rows;
  } catch (error) {
    console.error('Error fetching pharmacy queue from SSB:', error);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE User ID ‡∏à‡∏≤‡∏Å VN (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô code.txt)
 */
async function getLineUserIdByVN(vn, hn) {
  try {
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ LINE User ID ‡∏à‡∏≤‡∏Å HN ‡∏Å‡πà‡∏≠‡∏ô
    const result = await queryDB2(
      `SELECT line_user_id, id_card 
       FROM line_registered_users 
       WHERE hn = ? 
       LIMIT 1`,
      [hn]
    );

    if (result.length > 0) {
      return result[0].line_user_id;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å ID Card ‡πÉ‡∏ô SSB
    const ssbQuery = `
      SELECT N.ID 
      FROM HNOPD_MASTER OM
      LEFT JOIN HNName N ON OM.HN = N.HN
      WHERE OM.VN = @vn
    `;
    const ssbRows = await queryDB1(ssbQuery, {
      vn: { type: sqlServer.VarChar, value: vn }
    });

    if (ssbRows.length > 0) {
      const idCard = ssbRows[0].ID;
      const lineUserResult = await queryDB2(
        'SELECT line_user_id FROM line_registered_users WHERE id_card = ? LIMIT 1',
        [idCard]
      );
      
      if (lineUserResult.length > 0) {
        return lineUserResult[0].line_user_id;
      }
    }

    return null;
  } catch (error) {
    console.error(`Error getting LINE User ID for VN ${vn}:`, error);
    return null;
  }
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSB (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô code.txt)
 */
function determineStatus(item) {
  const { DrugAcknowledge, DrugReady, StockCode, FacilityRequestMethod, ReceiptNo, OutDateTime } = item;
  
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤
  if (StockCode === 'NODRUG' || FacilityRequestMethod !== null) {
    return 'completed';
  }
  
  // ‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°
  if (DrugAcknowledge === 1 && DrugReady === 1 && StockCode !== 'NODRUG' && !FacilityRequestMethod && !ReceiptNo && !OutDateTime) {
    return 'medicine_ready';
  }
  
  // ‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤
  if (DrugAcknowledge === 1 && DrugReady === 0 && StockCode !== 'NODRUG' && !FacilityRequestMethod) {
    return 'waiting_medicine';
  }
  
  // ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  if (ReceiptNo || OutDateTime) {
    return 'completed';
  }
  
  return 'waiting_medicine'; // default
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å paymentq ‡πÉ‡∏ô DB3 (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô code.txt)
 */
async function fetchPaymentQueueFromDB3() {
  try {
    const sql = `
      SELECT id, vn, payment_slot, name, medicine, clinic_name, sub, created_at
      FROM paymentq
      WHERE DATE(created_at) = CURDATE()
      ORDER BY created_at DESC
      LIMIT 200
    `;
    const rows = await queryDB3(sql);
    return rows;
  } catch (err) {
    console.error('Error fetching payment queue from DB3:', err);
    return [];
  }
}

// ===== TEST CASES =====

/**
 * TEST 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
async function test1_DatabaseConnection() {
  log('cyan', '\n========== TEST 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==========');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MySQL (DB2)
    const mysqlResult = await queryDB2('SELECT 1 as test');
    if (mysqlResult[0].test === 1) {
      log('green', '‚úÖ MySQL (DB2) connection: OK');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SQL Server (SSB/DB1)
    const ssbResult = await queryDB1('SELECT 1 as test');
    if (ssbResult[0].test === 1) {
      log('green', '‚úÖ SQL Server (SSB/DB1) connection: OK');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MySQL (DB3)
    try {
      const db3Result = await queryDB3('SELECT 1 as test');
      if (db3Result[0].test === 1) {
        log('green', '‚úÖ MySQL (DB3 - qfinancialtest) connection: OK');
      }
    } catch (e) {
      log('yellow', '‚ö†Ô∏è  DB3 connection failed (‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏° Payment Queue test)');
    }

    return true;
  } catch (error) {
    log('red', '‚ùå Database connection failed:');
    console.error(error);
    return false;
  }
}

/**
 * TEST 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤‡∏à‡∏≤‡∏Å SSB (‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà)
 */
async function test2_FetchPharmacyQueue() {
  log('cyan', '\n========== TEST 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤ (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç drug.txt) ==========');
  
  try {
    const queueData = await fetchPharmacyQueueFromSSB();
    
    if (queueData.length > 0) {
      log('green', `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß: ${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
      console.log('\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
      queueData.slice(0, 5).forEach((item, idx) => {
        console.log(`\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${idx + 1} ---`);
        console.log(`VN: ${item.VN}`);
        console.log(`HN: ${item.HN}`);
        console.log(`‡∏ä‡∏∑‡πà‡∏≠: ${item.PatientName || '-'}`);
        console.log(`‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å: ${item.ClinicName || '-'} (${item.Clinic})`);
        console.log(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${item.MedicineStatus}`);
        console.log(`DrugAcknowledge: ${item.DrugAcknowledge}`);
        console.log(`DrugReady: ${item.DrugReady}`);
        console.log(`StockCode: ${item.StockCode || '-'}`);
        console.log(`FacilityRequestMethod: ${item.FacilityRequestMethod || 'NULL'}`);
        console.log(`ApprovedByUserCode: ${item.ApprovedByUserCode || '-'}`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        const determinedStatus = determineStatus(item);
        console.log(`‚û°Ô∏è  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${determinedStatus}`);
      });
      
      // ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
      console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á:');
      console.log(`   ‚úì Clinic NOT LIKE '%SC%'`);
      console.log(`   ‚úì Clinic NOT IN ('99994','150043','SCKTB','999911','14009','150042','99999')`);
      console.log(`   ‚úì ApprovedByUserCode IS NOT NULL`);
      console.log(`   ‚úì DrugAcknowledge = 1`);
      console.log(`   ‚úì ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô FacilityRequestMethod ‡πÅ‡∏•‡∏∞ NODRUG`);
      
      return queueData;
    } else {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
      log('yellow', '   ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:');
      console.log('   - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç');
      console.log('   - ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô SC ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô');
      console.log('   - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ApprovedByUserCode');
      console.log('   - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ DrugAcknowledge');
      return [];
    }
  } catch (error) {
    log('red', '‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return [];
  }
}

/**
 * TEST 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤"
 */
async function test3_SendWaitingMedicineMessage(item, lineUserId, dryRun = false) {
  log('cyan', '\n========== TEST 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤" ==========');
  
  try {
    const { VN, PatientName, ClinicName } = item;
    
    const message = `‚è≥ ‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤

üìã VN: ${VN}
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${PatientName || '-'}
üè• ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å: ${ClinicName || '-'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì`;

    if (dryRun) {
      log('blue', '\nüì± ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (DRY RUN):');
      console.log(message);
      log('yellow', '\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (DRY RUN MODE)');
      return true;
    }

    await sendLineMessage(lineUserId, message);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const tracking = await queryDB2(
      'SELECT * FROM pharmacy_queue_tracking WHERE vn = ?',
      [VN]
    );

    if (tracking.length === 0) {
      await queryDB2(
        `INSERT INTO pharmacy_queue_tracking 
         (vn, line_user_id, status, notified_waiting) 
         VALUES (?, ?, ?, 1)`,
        [VN, lineUserId, 'waiting_medicine']
      );
    } else {
      await queryDB2(
        'UPDATE pharmacy_queue_tracking SET status = ?, notified_waiting = 1, updated_at = NOW() WHERE vn = ?',
        ['waiting_medicine', VN]
      );
    }

    await logEvent('pharmacy.queue.waiting', { vn: VN, line_user_id: lineUserId });

    log('green', '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    log('red', '‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

/**
 * TEST 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°"
 */
async function test4_SendMedicineReadyMessage(item, lineUserId, dryRun = false) {
  log('cyan', '\n========== TEST 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°" ==========');
  
  try {
    const { VN, PatientName, ClinicName } = item;
    
    const message = `‚úÖ ‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!

üìã VN: ${VN}
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${PatientName || '-'}
üè• ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å: ${ClinicName || '-'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üîî`;

    if (dryRun) {
      log('blue', '\nüì± ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (DRY RUN):');
      console.log(message);
      log('yellow', '\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (DRY RUN MODE)');
      return true;
    }

    await sendLineMessage(lineUserId, message);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await queryDB2(
      'UPDATE pharmacy_queue_tracking SET status = ?, notified_ready = 1, updated_at = NOW() WHERE vn = ?',
      ['medicine_ready', VN]
    );

    await logEvent('pharmacy.queue.ready', { vn: VN, line_user_id: lineUserId });

    log('green', '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    log('red', '‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

/**
 * TEST 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤"
 */
async function test5_SendNoDrugMessage(item, lineUserId, dryRun = false) {
  log('cyan', '\n========== TEST 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤" ==========');
  
  try {
    const { VN, PatientName } = item;
    
    const message = `‚ÑπÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

üìã VN: ${VN}
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${PatientName || '-'}

‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢`;

    if (dryRun) {
      log('blue', '\nüì± ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (DRY RUN):');
      console.log(message);
      log('yellow', '\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (DRY RUN MODE)');
      return true;
    }

    await sendLineMessage(lineUserId, message);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const tracking = await queryDB2(
      'SELECT * FROM pharmacy_queue_tracking WHERE vn = ?',
      [VN]
    );

    if (tracking.length === 0) {
      await queryDB2(
        `INSERT INTO pharmacy_queue_tracking 
         (vn, line_user_id, status, notified_waiting, notified_ready) 
         VALUES (?, ?, ?, 1, 1)`,
        [VN, lineUserId, 'completed']
      );
    } else {
      await queryDB2(
        'UPDATE pharmacy_queue_tracking SET status = ?, updated_at = NOW() WHERE vn = ?',
        ['completed', VN]
      );
    }

    await logEvent('pharmacy.queue.no_drug', { vn: VN, line_user_id: lineUserId });

    log('green', '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    log('red', '‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

/**
 * TEST 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô "‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß" (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
 */
async function test6_SendQueueCalledMessage(vn, dryRun = false) {
  log('cyan', '\n========== TEST 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß" ==========');
  
  try {
    // ‡∏î‡∏∂‡∏á LINE User ID
    const tracking = await queryDB2(
      'SELECT line_user_id FROM pharmacy_queue_tracking WHERE vn = ? AND status = "medicine_ready"',
      [vn]
    );

    if (tracking.length === 0) {
      log('red', '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà medicine_ready');
      return false;
    }

    const lineUserId = tracking[0].line_user_id;

    const message = `üîî ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!

üìã VN: ${vn}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞`;

    if (dryRun) {
      log('blue', '\nüì± ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (DRY RUN):');
      console.log(message);
      log('yellow', '\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (DRY RUN MODE)');
      return true;
    }

    await sendLineMessage(lineUserId, message);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô called
    await queryDB2(
      'UPDATE pharmacy_queue_tracking SET status = "called", updated_at = NOW() WHERE vn = ?',
      [vn]
    );

    await logEvent('pharmacy.queue.called', { vn, line_user_id: lineUserId });

    log('green', '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    log('red', '‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

/**
 * TEST 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue
 */
async function test7_PaymentQueue(dryRun = false) {
  log('cyan', '\n========== TEST 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue ==========');
  
  try {
    const paymentRows = await fetchPaymentQueueFromDB3();
    
    if (paymentRows.length === 0) {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment Queue');
      return;
    }

    log('green', `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment Queue: ${paymentRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
    console.log('\nüí∞ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
    for (const row of paymentRows.slice(0, 3)) {
      console.log(`\n--- VN: ${row.vn} ---`);
      console.log(`‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ${row.payment_slot || '-'}`);
      console.log(`‡∏ä‡∏∑‡πà‡∏≠: ${row.name || '-'}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const tracking = await queryDB2(
        'SELECT * FROM payment_queue_tracking WHERE vn = ? AND payment_slot = ?',
        [row.vn, row.payment_slot]
      );

      if (tracking.length > 0) {
        log('yellow', '‚ö†Ô∏è  ‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡πâ‡∏≤‡∏°)');
        continue;
      }

      const lineUserId = await getLineUserIdByVN(row.vn, null);
      if (!lineUserId) {
        log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID (‡∏Ç‡πâ‡∏≤‡∏°)');
        continue;
      }

      const message = `üí∞ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß

üìã VN: ${row.vn}
üßÆ ‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ${row.payment_slot}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${row.payment_slot} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞`;

      if (dryRun) {
        log('blue', '\nüì± ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (DRY RUN):');
        console.log(message);
        log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á (DRY RUN MODE)');
      } else {
        await sendLineMessage(lineUserId, message);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        await queryDB2(
          `INSERT INTO payment_queue_tracking (vn, line_user_id, payment_slot, notified_payment)
           VALUES (?, ?, ?, 1)`,
          [row.vn, lineUserId, row.payment_slot]
        );

        await logEvent('payment.queue.called', {
          vn: row.vn,
          line_user_id: lineUserId,
          payment_slot: row.payment_slot
        });

        log('green', `‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô VN: ${row.vn} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
    }
  } catch (error) {
    log('red', '‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
  }
}

/**
 * TEST 8: Full Flow - ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏ï‡∏≤‡∏° code ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó)
 */
async function test8_FullFlow(dryRun = false) {
  log('cyan', '\n========== TEST 8: Full Flow (‡∏ï‡∏≤‡∏° code ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó) ==========');
  
  try {
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤
    log('blue', '\n[1/4] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤‡∏à‡∏≤‡∏Å SSB (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç drug.txt)...');
    const queueData = await fetchPharmacyQueueFromSSB();
    
    if (queueData.length === 0) {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      return;
    }

    log('green', `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß: ${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // 2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏¥‡∏ß
    log('blue', '\n[2/4] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß...');
    
    let processedCount = 0;
    for (const item of queueData.slice(0, 5)) { // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
      const { VN, HN, DrugAcknowledge, DrugReady, StockCode, FacilityRequestMethod } = item;

      // ‡∏´‡∏≤ LINE User ID
      const lineUserId = await getLineUserIdByVN(VN, HN);
      if (!lineUserId) {
        log('yellow', `‚ö†Ô∏è  VN: ${VN} - ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID (‡∏Ç‡πâ‡∏≤‡∏°)`);
        continue;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const trackingResult = await queryDB2(
        'SELECT * FROM pharmacy_queue_tracking WHERE vn = ?',
        [VN]
      );

      let currentStatus = 'waiting_medicine';
      let notifiedWaiting = false;
      let notifiedReady = false;

      if (trackingResult.length > 0) {
        currentStatus = trackingResult[0].status;
        notifiedWaiting = trackingResult[0].notified_waiting;
        notifiedReady = trackingResult[0].notified_ready;
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° determineStatus()
      const newStatus = determineStatus(item);

      console.log(`\nüìã VN: ${VN}`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ${currentStatus}`);
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: ${newStatus}`);
      console.log(`   StockCode: ${StockCode || '-'}`);
      console.log(`   FacilityRequestMethod: ${FacilityRequestMethod || 'NULL'}`);
      console.log(`   DrugReady: ${DrugReady}`);

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (newStatus === 'waiting_medicine' && !notifiedWaiting) {
        await test3_SendWaitingMedicineMessage(item, lineUserId, dryRun);
        processedCount++;
      } 
      else if (newStatus === 'medicine_ready' && !notifiedReady) {
        await test4_SendMedicineReadyMessage(item, lineUserId, dryRun);
        processedCount++;
      }
      else if (newStatus === 'completed' && (StockCode === 'NODRUG' || FacilityRequestMethod !== null)) {
        await test5_SendNoDrugMessage(item, lineUserId, dryRun);
        processedCount++;
      }
      else {
        log('blue', '   ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)');
      }
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue
    log('blue', '\n[3/4] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Payment Queue...');
    await test7_PaymentQueue(dryRun);

    // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    log('green', `\n[4/4] ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${processedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
  } catch (error) {
    log('red', '\n‚ùå Full Flow ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
  }
}

/**
 * TEST 9: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö VN ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
 */
async function test9_SpecificVN(vn, dryRun = false) {
  log('cyan', `\n========== TEST 9: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö VN: ${vn} ==========`);
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSB (‡πÉ‡∏ä‡πâ query ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö code)
    const sql = `
      SELECT DISTINCT 
        HNOPD_MASTER.VN,
        HNOPD_MASTER.HN,
        HNOPD_PRESCRIP.DrugAcknowledge,
        HNOPD_PRESCRIP.DrugReady,
        HNOPD_PRESCRIP_MEDICINE.StockCode,
        HNOPD_PRESCRIP_MEDICINE.FacilityRequestMethod,
        HNOPD_PRESCRIP.CloseVisitCode,
        HNOPD_PRESCRIP.ApprovedByUserCode,
        HNOPD_RECEIVE_HEADER.ReceiptNo,
        HNOPD_MASTER.OutDateTime,
        SUBSTRING(dbo.HNPAT_NAME.FirstName, 2, 100) + ' ' + SUBSTRING(dbo.HNPAT_NAME.LastName, 2, 100) AS PatientName,
        HNOPD_PRESCRIP.Clinic,
        (SELECT ISNULL(SUBSTRING(LocalName, 2, 1000), SUBSTRING(EnglishName, 2, 1000))
         FROM DNSYSCONFIG 
         WHERE CtrlCode = '42203' AND code = HNOPD_PRESCRIP.Clinic) AS ClinicName
      FROM HNOPD_MASTER WITH (NOLOCK)
      LEFT OUTER JOIN HNOPD_PRESCRIP 
        ON HNOPD_MASTER.VisitDate=HNOPD_PRESCRIP.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_PRESCRIP.VN
      LEFT OUTER JOIN HNOPD_RECEIVE_HEADER 
        ON HNOPD_MASTER.VisitDate=HNOPD_RECEIVE_HEADER.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_RECEIVE_HEADER.VN
      LEFT OUTER JOIN HNOPD_PRESCRIP_MEDICINE 
        ON HNOPD_PRESCRIP.VisitDate=HNOPD_PRESCRIP_MEDICINE.VisitDate 
        AND HNOPD_PRESCRIP.VN=HNOPD_PRESCRIP_MEDICINE.VN 
        AND HNOPD_PRESCRIP.PrescriptionNo=HNOPD_PRESCRIP_MEDICINE.PrescriptionNo
      LEFT OUTER JOIN HNPAT_NAME 
        ON HNOPD_MASTER.HN=HNPAT_NAME.HN
      WHERE HNOPD_MASTER.VN = '${vn}'
        AND CONVERT(DATE, HNOPD_MASTER.VisitDate) = CONVERT(DATE, GETDATE())
    `;

    const rows = await queryDB1(sql);
    
    if (rows.length === 0) {
      log('red', `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VN: ${vn}`);
      return;
    }

    const item = rows[0];
    log('green', `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VN: ${vn}`);
    
    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°:');
    console.log(`   VN: ${item.VN}`);
    console.log(`   HN: ${item.HN}`);
    console.log(`   ‡∏ä‡∏∑‡πà‡∏≠: ${item.PatientName || '-'}`);
    console.log(`   ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å: ${item.ClinicName || '-'} (${item.Clinic})`);
    console.log(`   DrugAcknowledge: ${item.DrugAcknowledge}`);
    console.log(`   DrugReady: ${item.DrugReady}`);
    console.log(`   StockCode: ${item.StockCode || '-'}`);
    console.log(`   FacilityRequestMethod: ${item.FacilityRequestMethod || 'NULL'}`);
    console.log(`   ApprovedByUserCode: ${item.ApprovedByUserCode || '-'}`);
    console.log(`   CloseVisitCode: ${item.CloseVisitCode || '-'}`);
    console.log(`   ReceiptNo: ${item.ReceiptNo || 'NULL'}`);
    console.log(`   OutDateTime: ${item.OutDateTime || 'NULL'}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    console.log('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:');
    const checks = {
      'Clinic NOT LIKE %SC%': !item.ClinicName?.includes('SC'),
      'Clinic NOT IN exclude list': !['99994','150043','SCKTB','999911','14009','150042','99999'].includes(item.Clinic),
      'ApprovedByUserCode IS NOT NULL': !!item.ApprovedByUserCode,
      'DrugAcknowledge = 1': item.DrugAcknowledge === 1,
      'StockCode != NODRUG': item.StockCode !== 'NODRUG',
      'FacilityRequestMethod IS NULL': !item.FacilityRequestMethod
    };
    
    let passAll = true;
    for (const [condition, pass] of Object.entries(checks)) {
      const icon = pass ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${condition}`);
      if (!pass) passAll = false;
    }

    if (!passAll) {
      log('yellow', '\n‚ö†Ô∏è  VN ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤');
      return;
    }

    // ‡∏´‡∏≤ LINE User ID
    const lineUserId = await getLineUserIdByVN(item.VN, item.HN);
    if (!lineUserId) {
      log('yellow', '\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID');
      return;
    }

    log('green', `‚úÖ ‡∏û‡∏ö LINE User ID: ${lineUserId.substring(0, 10)}...`);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    console.log('\nüíä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:');
    const determinedStatus = determineStatus(item);
    console.log(`   ‚û°Ô∏è  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${determinedStatus}`);
    
    if (determinedStatus === 'completed' && (item.StockCode === 'NODRUG' || item.FacilityRequestMethod !== null)) {
      console.log('   ‚Üí ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤ (NODRUG ‡∏´‡∏£‡∏∑‡∏≠ FacilityRequestMethod)');
      await test5_SendNoDrugMessage(item, lineUserId, dryRun);
    }
    else if (determinedStatus === 'medicine_ready') {
      console.log('   ‚Üí ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° (DrugReady = 1, StockCode != NODRUG, FacilityRequestMethod IS NULL)');
      await test4_SendMedicineReadyMessage(item, lineUserId, dryRun);
    }
    else if (determinedStatus === 'waiting_medicine') {
      console.log('   ‚Üí ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤ (DrugAcknowledge = 1, DrugReady = 0, StockCode != NODRUG, FacilityRequestMethod IS NULL)');
      await test3_SendWaitingMedicineMessage(item, lineUserId, dryRun);
    }
    else {
      log('yellow', '   ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: completed (‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö)');
    }

  } catch (error) {
    log('red', '‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
  }
}

/**
 * TEST 10: ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
async function test10_Cleanup(vn = null) {
  log('cyan', '\n========== TEST 10: ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ==========');
  
  try {
    if (vn) {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VN ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      await queryDB2('DELETE FROM pharmacy_queue_tracking WHERE vn = ?', [vn]);
      await queryDB2('DELETE FROM payment_queue_tracking WHERE vn = ?', [vn]);
      log('green', `‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á VN: ${vn} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } else {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
      await queryDB2(
        'DELETE FROM pharmacy_queue_tracking WHERE DATE(created_at) < CURDATE()'
      );
      await queryDB2(
        'DELETE FROM payment_queue_tracking WHERE DATE(created_at) < CURDATE()'
      );
      log('green', '‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)');
    }
  } catch (error) {
    log('red', '‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
  }
}

/**
 * TEST 11: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö determineStatus function
 */
async function test11_DetermineStatus() {
  log('cyan', '\n========== TEST 11: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö determineStatus() ==========');
  
  const testCases = [
    {
      name: '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤ (DrugReady=0)',
      data: { DrugAcknowledge: 1, DrugReady: 0, StockCode: 'ABC123', FacilityRequestMethod: null, ReceiptNo: null, OutDateTime: null },
      expected: 'waiting_medicine'
    },
    {
      name: '‡∏¢‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° (DrugReady=1)',
      data: { DrugAcknowledge: 1, DrugReady: 1, StockCode: 'ABC123', FacilityRequestMethod: null, ReceiptNo: null, OutDateTime: null },
      expected: 'medicine_ready'
    },
    {
      name: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤ (NODRUG)',
      data: { DrugAcknowledge: 1, DrugReady: 0, StockCode: 'NODRUG', FacilityRequestMethod: null, ReceiptNo: null, OutDateTime: null },
      expected: 'completed'
    },
    {
      name: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤ (FacilityRequestMethod)',
      data: { DrugAcknowledge: 1, DrugReady: 0, StockCode: 'ABC123', FacilityRequestMethod: 'SOME_METHOD', ReceiptNo: null, OutDateTime: null },
      expected: 'completed'
    },
    {
      name: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      data: { DrugAcknowledge: 1, DrugReady: 1, StockCode: 'ABC123', FacilityRequestMethod: null, ReceiptNo: 'R12345', OutDateTime: null },
      expected: 'completed'
    },
    {
      name: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
      data: { DrugAcknowledge: 1, DrugReady: 1, StockCode: 'ABC123', FacilityRequestMethod: null, ReceiptNo: null, OutDateTime: '2025-01-20' },
      expected: 'completed'
    }
  ];

  console.log('\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ:');
  let passed = 0;
  let failed = 0;

  for (const testCase of testCases) {
    const result = determineStatus(testCase.data);
    const isPass = result === testCase.expected;
    
    if (isPass) {
      log('green', `‚úÖ ${testCase.name}: ${result}`);
      passed++;
    } else {
      log('red', `‚ùå ${testCase.name}: ‡πÑ‡∏î‡πâ ${result}, ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á ${testCase.expected}`);
      failed++;
    }
  }

  console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ú‡πà‡∏≤‡∏ô ${passed}/${testCases.length} ‡∏Å‡∏£‡∏ì‡∏µ`);
  if (failed === 0) {
    log('green', 'üéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ!');
  }
}

// ===== ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å =====
async function runTests() {
  console.log('\n' + '='.repeat(70));
  log('cyan', 'üß™ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Pharmacy Queue Monitor (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏° drug.txt)');
  console.log('='.repeat(70));

  const args = process.argv.slice(2);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dry-run mode
  const dryRun = args.includes('--dry-run');
  if (dryRun) {
    log('yellow', '\n‚ö†Ô∏è  DRY RUN MODE: ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡∏à‡∏£‡∏¥‡∏á\n');
  }

  // ‡∏î‡∏∂‡∏á VN ‡∏à‡∏≤‡∏Å argument
  let specificVN = null;
  const vnArg = args.find(arg => arg.startsWith('--vn='));
  if (vnArg) {
    specificVN = vnArg.split('=')[1];
  }

  try {
    if (args.includes('--all')) {
      // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å test
      log('blue', '\nüìù ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');
      await test1_DatabaseConnection();
      await test2_FetchPharmacyQueue();
      await test11_DetermineStatus();
      await test8_FullFlow(dryRun);
      
    } else if (args.includes('--vn') && specificVN) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö VN ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      log('blue', `\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö VN: ${specificVN}\n`);
      await test1_DatabaseConnection();
      await test9_SpecificVN(specificVN, dryRun);
      
    } else if (args.includes('--queue')) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß
      log('blue', '\nüìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß\n');
      await test1_DatabaseConnection();
      await test2_FetchPharmacyQueue();
      
    } else if (args.includes('--payment')) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue
      log('blue', '\nüí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payment Queue\n');
      await test1_DatabaseConnection();
      await test7_PaymentQueue(dryRun);
      
    } else if (args.includes('--call') && specificVN) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß
      log('blue', `\nüîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß VN: ${specificVN}\n`);
      await test1_DatabaseConnection();
      await test6_SendQueueCalledMessage(specificVN, dryRun);
      
    } else if (args.includes('--cleanup')) {
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await test1_DatabaseConnection();
      await test10_Cleanup(specificVN);
      
    } else if (args.includes('--status')) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö determineStatus
      await test11_DetermineStatus();
      
    } else if (args.includes('--quick')) {
      // Quick test
      log('blue', '\n‚ö° Quick Test\n');
      await test1_DatabaseConnection();
      const queueData = await test2_FetchPharmacyQueue();
      if (queueData.length > 0) {
        log('green', `\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß ${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      }
      await test11_DetermineStatus();
      
    } else {
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
      console.log('\nüìö ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
      console.log('‚îÄ'.repeat(70));
      console.log('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:');
      console.log('  node testPharmacyMonitor.js --quick');
      console.log('  node testPharmacyMonitor.js --queue');
      console.log('  node testPharmacyMonitor.js --payment');
      console.log('  node testPharmacyMonitor.js --status           # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö determineStatus()');
      
      console.log('\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö VN ‡πÄ‡∏â‡∏û‡∏≤‡∏∞:');
      console.log('  node testPharmacyMonitor.js --vn=265');
      console.log('  node testPharmacyMonitor.js --vn=265 --dry-run');
      
      console.log('\nüîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß:');
      console.log('  node testPharmacyMonitor.js --call --vn=265');
      console.log('  node testPharmacyMonitor.js --call --vn=265 --dry-run');
      
      console.log('\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:');
      console.log('  node testPharmacyMonitor.js --all');
      console.log('  node testPharmacyMonitor.js --all --dry-run');
      
      console.log('\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
      console.log('  node testPharmacyMonitor.js --cleanup');
      console.log('  node testPharmacyMonitor.js --cleanup --vn=265');
      
      console.log('\nüí° TIP:');
      console.log('  --dry-run = ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á LINE ‡∏à‡∏£‡∏¥‡∏á (‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)');
      console.log('  ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á');
      console.log('\nüìå ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà:');
      console.log('  ‚úì Clinic NOT LIKE %SC%');
      console.log('  ‚úì Clinic NOT IN (99994, 150043, SCKTB, ...)');
      console.log('  ‚úì ApprovedByUserCode IS NOT NULL');
      console.log('  ‚úì StockCode != NODRUG');
      console.log('  ‚úì FacilityRequestMethod IS NULL');
      
      console.log('\n‚îÄ'.repeat(70));
      
      // ‡∏£‡∏±‡∏ô quick test ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      log('blue', '\nüí° ‡∏£‡∏±‡∏ô Quick Test ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...\n');
      await test1_DatabaseConnection();
      await test2_FetchPharmacyQueue();
      await test11_DetermineStatus();
    }

    console.log('\n' + '='.repeat(70));
    log('cyan', '‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    console.log('='.repeat(70) + '\n');
    
  } catch (error) {
    log('red', '\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
    console.error(error);
  }
  
  process.exit(0);
}

// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö =====
if (require.main === module) {
  runTests().catch(error => {
    log('red', '\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:');
    console.error(error);
    process.exit(1);
  });
}

module.exports = {
  test1_DatabaseConnection,
  test2_FetchPharmacyQueue,
  test3_SendWaitingMedicineMessage,
  test4_SendMedicineReadyMessage,
  test5_SendNoDrugMessage,
  test6_SendQueueCalledMessage,
  test7_PaymentQueue,
  test8_FullFlow,
  test9_SpecificVN,
  test10_Cleanup,
  test11_DetermineStatus,
  fetchPharmacyQueueFromSSB,
  getLineUserIdByVN,
  determineStatus
};