const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const { 
  startRegistration, 
  replyMessage, 
  checkRegistrationStatus,
  processIdCardInput
} = require('./handlers/messageHandler');
const redisClient = require('./redisClient');
const { handlePostback } = require('./handlers/postbackHandler');
const queueRouter = require('./routes');
const { queryDB1, queryDB2, queryDB3 } = require('./db');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());

// ========================================
// STATIC FILES - ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô ROUTES
// ========================================
app.use('/frontend', express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'frontend'))); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

// ========================================
// BASIC ROUTES
// ========================================
app.get('/webhook', (req, res) => res.send('LINE OA Webhook running'));

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString() 
  });
});

// Dashboard Route - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ path.join
app.get('/dashboard', (req, res) => {
  res.sendFile(path.join(__dirname, 'frontend', 'dashboard.html'));
});

// ========================================
// API ROUTES
// ========================================

// API ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/pharmacy-queue/status', async (req, res) => {
  console.log('üìä API /api/pharmacy-queue/status called');
  try {
    const queues = await queryDB2(
      `SELECT 
        pq.*,
        lr.full_name,
        lr.id_card
      FROM pharmacy_queue_tracking pq
      LEFT JOIN line_registered_users lr ON pq.line_user_id = lr.line_user_id
      WHERE DATE(pq.created_at) = CURDATE()
      ORDER BY pq.created_at DESC`
    );

    console.log(`‚úÖ Found ${queues.length} queues`);
    
    res.json({ 
      success: true, 
      count: queues.length,
      queues 
    });
  } catch (error) {
    console.error('‚ùå API pharmacy-queue status error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Internal server error',
      error: error.message
    });
  }
});

// API ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ LINE)
app.get('/api/pharmacy-queue/all-status', async (req, res) => {
  console.log('üìä API /api/pharmacy-queue/all-status called');
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å SSB
    console.log('üîç Querying SSB database...');
    const queues = await queryDB1(
      `SELECT DISTINCT 
        HNOPD_MASTER.VN,
        HNOPD_MASTER.HN,
        ISNULL(HNOPD_PRESCRIP.DrugAcknowledge, 0) as DrugAcknowledge,
        ISNULL(HNOPD_PRESCRIP.DrugReady, 0) as DrugReady,
        HNOPD_MASTER.OutDateTime,
        HNOPD_MASTER.VisitDate as VisitDateTime,
        SUBSTRING(ISNULL(dbo.HNPAT_NAME.FirstName, ''), 2, 100) + ' ' + 
        SUBSTRING(ISNULL(dbo.HNPAT_NAME.LastName, ''), 2, 100) AS PatientName,
        HNOPD_PRESCRIP.Clinic,
        (SELECT ISNULL(SUBSTRING(LocalName, 2, 1000), SUBSTRING(EnglishName, 2, 1000))
         FROM DNSYSCONFIG 
         WHERE CtrlCode = '42203' AND code = HNOPD_PRESCRIP.Clinic) AS ClinicName,
        HNOPD_RECEIVE_HEADER.ReceiptNo,
        HNOPD_PRESCRIP_MEDICINE.StockCode
      FROM HNOPD_MASTER WITH (NOLOCK)
      LEFT OUTER JOIN HNOPD_PRESCRIP 
        ON HNOPD_MASTER.VisitDate=HNOPD_PRESCRIP.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_PRESCRIP.VN
      LEFT OUTER JOIN HNOPD_RECEIVE_HEADER 
        ON HNOPD_MASTER.VisitDate=HNOPD_RECEIVE_HEADER.VisitDate 
        AND HNOPD_MASTER.VN=HNOPD_RECEIVE_HEADER.VN
      LEFT OUTER JOIN HNOPD_PRESCRIP_MEDICINE 
        ON HNOPD_PRESCRIP.VisitDate=HNOPD_PRESCRIP_MEDICINE.VisitDate 
        AND HNOPD_PRESCRIP.VN=HNOPD_PRESCRIP_MEDICINE.VN 
        AND HNOPD_PRESCRIP.PrescriptionNo=HNOPD_PRESCRIP_MEDICINE.PrescriptionNo
      LEFT OUTER JOIN HNPAT_NAME 
        ON HNOPD_MASTER.HN=HNPAT_NAME.HN
      WHERE HNOPD_MASTER.Cxl=0
        AND CONVERT(DATE, HNOPD_MASTER.VisitDate) = CONVERT(DATE, GETDATE())
        AND HNPAT_NAME.SuffixSmall=0
      ORDER BY HNOPD_MASTER.VN DESC`
    );

    console.log(`‚úÖ Found ${queues.length} queues from SSB`);

    // ‡∏î‡∏∂‡∏á LINE User ID ‡∏à‡∏≤‡∏Å DB2 ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const { getLineUserIdByVN } = require('./pharmacyQueueMonitor');
    
    console.log('üîç Checking LINE User IDs and status...');
    for (let i = 0; i < queues.length; i++) {
      try {
        const queue = queues[i];
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ LINE User ID
        const lineUserId = await getLineUserIdByVN(queue.VN, queue.HN);
        queue.line_user_id = lineUserId;
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" (‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        queue.is_completed = queue.ReceiptNo ? true : false;
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≤" (NODRUG)
        queue.is_no_drug = queue.StockCode === 'NODRUG' ? true : false;
        
        if (i % 10 === 0) {
          console.log(`Progress: ${i}/${queues.length}`);
        }
      } catch (err) {
        console.error(`Error checking LINE ID for VN ${queues[i].VN}:`, err.message);
        queues[i].line_user_id = null;
        queues[i].is_completed = false;
        queues[i].is_no_drug = false;
      }
    }

    console.log(`‚úÖ LINE check complete`);
    
    res.json({ 
      success: true, 
      count: queues.length,
      queues 
    });
  } catch (error) {
    console.error('‚ùå API pharmacy-queue all-status error:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({ 
      success: false, 
      message: 'Internal server error',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// API ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏¥‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
app.get('/api/pharmacy-queue/stats', async (req, res) => {
  console.log('üìä API /api/pharmacy-queue/stats called');
  try {
    const stats = await queryDB2(
      `SELECT 
        status,
        COUNT(*) as count
      FROM pharmacy_queue_tracking
      WHERE DATE(created_at) = CURDATE()
      GROUP BY status`
    );

    const result = {
      waiting_medicine: 0,
      medicine_ready: 0,
      called: 0,
      completed: 0
    };

    stats.forEach(s => {
      result[s.status] = s.count;
    });

    console.log('‚úÖ Stats:', result);

    res.json({ 
      success: true, 
      stats: result,
      total: stats.reduce((sum, s) => sum + s.count, 0)
    });
  } catch (error) {
    console.error('‚ùå API pharmacy-queue stats error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Internal server error',
      error: error.message
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
app.post('/api/call-pharmacy-queue', async (req, res) => {
  console.log('üìû API /api/call-pharmacy-queue called');
  try {
    const { vn } = req.body;
    
    if (!vn) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing VN parameter' 
      });
    }

    const { markQueueAsCalled } = require('./pharmacyQueueMonitor');
    const result = await markQueueAsCalled(vn);

    res.json(result);
  } catch (error) {
    console.error('API call-pharmacy-queue error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Internal server error' 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Token)
app.post('/api/check-rights', async (req, res) => {
  try {
    const { token, idCard } = req.body;
    
    if (!token || !idCard) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required parameters' 
      });
    }

    const { verifyToken } = require('./jwtHelper');
    const decoded = verifyToken(token);
    
    if (!decoded || decoded.id_card !== idCard) {
      return res.status(401).json({ 
        success: false, 
        message: 'Invalid token or ID card mismatch' 
      });
    }

    const { checkUserRightsFromSSB } = require('./handlers/messageHandler');
    const rightsCheck = await checkUserRightsFromSSB(idCard);

    if (!rightsCheck.success) {
      return res.status(404).json({ 
        success: false, 
        message: rightsCheck.message 
      });
    }

    res.json({
      success: true,
      data: {
        userInfo: rightsCheck.userInfo,
        rights: rightsCheck.rights,
        rightGroups: rightsCheck.rightGroups,
        latestVisit: rightsCheck.latestVisit
      }
    });

  } catch (error) {
    console.error('API check-rights error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Internal server error' 
    });
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF Registration
app.post('/liff-register', async (req, res) => {
  try {
    const { userId, firstName, lastName, idCard, birthDate, phone, pdpaConsent } = req.body;

    if (!userId || !firstName || !lastName || !idCard || !birthDate || !phone) {
      return res.json({ 
        success: false, 
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
      });
    }

    if (!/^\d{13}$/.test(idCard)) {
      return res.json({ 
        success: false, 
        message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    if (!/^0[0-9]{9}$/.test(phone)) {
      return res.json({ 
        success: false, 
        message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    if (!pdpaConsent) {
      return res.json({ 
        success: false, 
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç PDPA' 
      });
    }

    const registrationData = {
      firstName,
      lastName,
      idCard,
      birthDate,
      phone,
      pdpaConsent
    };

    await processIdCardInput(userId, registrationData.idCard, null);

    res.json({ 
      success: true, 
      message: '‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' 
    });

  } catch (err) {
    console.error('LIFF Registration error:', err);
    res.json({ 
      success: false, 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
    });
  }
});

// ========================================
// OTHER ROUTES
// ========================================
app.use('/queue', queueRouter);

const verifyRouter = require('./routes/verify');
app.use('/api', verifyRouter);
// ========================================
// WEBHOOK
// ========================================
app.post('/webhook', async (req, res) => {
  try {
    const events = req.body.events;
    
    for (const event of events) {
      if (event.type === 'follow') {
        const { linkRichMenuToUser } = require('./richmenu/linkRichMenu');
        const RICH_MENU_ID = process.env.RICH_MENU_ID || 'richmenu-xxx';
        await linkRichMenuToUser(event.source.userId, RICH_MENU_ID);

        const quickReplyItems = [
          { type: 'action', action: { type: 'message', label: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', text: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' } },
          { type: 'action', action: { type: 'message', label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' } },
          { type: 'action', action: { type: 'message', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' } }
        ];
        
        await replyMessage(event.replyToken, [
          { type: 'text', text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á' }
        ], quickReplyItems);
      }

      if (event.type === 'message' && event.message.type === 'text') {
        const userId = event.source.userId;
        const msg = event.message.text.trim().toLowerCase();

        const quickReplyItems = [
          { type: 'action', action: { type: 'message', label: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', text: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' } },
          { type: 'action', action: { type: 'message', label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' } },
          { type: 'action', action: { type: 'message', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' } },
          { type: 'action', action: { type: 'message', label: '‡∏£‡∏±‡∏ö Token', text: '‡∏£‡∏±‡∏ö token' } }
        ];

        if (msg === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' || msg === 'register') {
          await startRegistration(userId, event.replyToken);
        } 
        else if (msg === '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' || msg === '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' || msg === 'check_status') {
          const { handlePostback } = require('./handlers/postbackHandler');
          await handlePostback({
            source: { userId },
            postback: { data: 'action=check_status' },
            replyToken: event.replyToken
          });
        }
        else if (msg === '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤' || msg === 'preverify') {
          const { sendVerifyQR } = require('./handlers/verifyLineHandler');

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å DB
          const rows = await queryDB2('SELECT * FROM line_registered_users WHERE line_user_id = ?', [userId]);
          if (rows.length === 0) {
            await replyMessage(event.replyToken, [
              { type: 'text', text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ' }
            ]);
            return;
          }

          const patient = rows[0];
          await sendVerifyQR(userId, event.replyToken, patient);
        }
        else if (msg === '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' || msg === 'contact') {
          await replyMessage(event.replyToken, [
            { 
              type: 'text', 
              text: '‚òéÔ∏è ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\nüìû ‡πÇ‡∏ó‡∏£: 02-xxx-xxxx\nüìß Email: info@hospital.go.th\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 08:00-16:30 ‡∏ô.' 
            }
          ], quickReplyItems);
        } 
        else if (msg === '‡∏£‡∏±‡∏ö token' || msg === 'get_token') {
          const rows = await queryDB2(
            'SELECT * FROM line_registered_users WHERE line_user_id = ?',
            [userId]
          );

          if (rows.length === 0) {
            await replyMessage(event.replyToken, [
              { type: 'text', text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô' }
            ], quickReplyItems);
            return;
          }

          const userInfo = rows[0];
          const { createToken } = require('./jwtHelper');
          const jwtToken = createToken({
            lineUserId: userId,
            id_card: userInfo.id_card,
            full_name: userInfo.full_name,
            hn: userInfo.hn
          }, '24h');

          await replyMessage(event.replyToken, [
            { type: 'text', text: `üõ°Ô∏è Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:\n\n${jwtToken}\n\n‚è∞ Token ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á` }
          ], quickReplyItems);
        } 
        else {
          await replyMessage(event.replyToken, [
            { type: 'text', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå:\n‚Ä¢ "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà\n‚Ä¢ "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤\n‚Ä¢ "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" - ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' }
          ], quickReplyItems);
        }
      } 
      else if (event.type === 'postback') {
        await handlePostback(event);
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).send('Error');
  }
});

// ========================================
// START SERVER
// ========================================

const { startMonitoring } = require('./handlers/queueHandler');
startMonitoring(); // üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥ ‡∏ï‡∏≤‡∏° POLL_INTERVAL


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ LINE OA Webhook running on http://localhost:${PORT}`);
  console.log(`üìã Health check: http://localhost:${PORT}/health`);
  console.log(`üìä Dashboard: http://localhost:${PORT}/dashboard`);
  console.log(`üîó API Endpoints:`);
  console.log(`   - GET  /api/pharmacy-queue/status`);
  console.log(`   - GET  /api/pharmacy-queue/stats`);
  console.log(`   - POST /api/call-pharmacy-queue`);
  console.log(`   - POST /api/check-rights`);
  console.log(`üìÅ Dashboard path: ${path.join(__dirname, 'frontend', 'dashboard.html')}`);
});