const sqlServer = require('mssql');
const { queryDB1, queryDB2 } = require('../db');
const redisClient = require('../redisClient');
const { logEvent } = require('../auditLog');
const { isValidIdCard } = require('../utils/validation');
const axios = require('axios');
const { createToken } = require('../jwtHelper'); // Step 3: JWT
require('dotenv').config();

const LINE_MESSAGING_API = process.env.LINE_MESSAGING_API;
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Reply ‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
async function replyMessage(replyToken, messages, quickReplyItems = []) {
  try {
    const messagePayload = { replyToken, messages };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Quick Reply ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if (quickReplyItems.length > 0) {
      messagePayload.messages[0].quickReply = { items: quickReplyItems };
    }

    await axios.post(
      `${LINE_MESSAGING_API}/reply`,
      messagePayload,
      { headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}` } }
    );
  } catch (error) {
    console.error('Error sending reply:', error.response?.data || error.message);
  }
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push
async function pushMessage(lineUserId, messages) {
  try {
    await axios.post(
      `${LINE_MESSAGING_API}/push`,
      { to: lineUserId, messages },
      { headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}` } }
    );
  } catch (error) {
    console.error('Error sending push message:', error.response?.data || error.message);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏° registration
async function startRegistration(userId, replyToken) {
  const rows = await queryDB2('SELECT * FROM line_registered_users WHERE line_user_id = ?', [userId]);
  if (rows.length > 0) {
    await replyMessage(replyToken, [{ type: 'text', text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß' }]);
    return;
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Session ‡πÉ‡∏ô Redis
  await redisClient.set(
    `session:${userId}`,
    JSON.stringify({ step: 'awaiting_id_card', timestamp: Date.now() }),
    { EX: 600 } // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ session 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  );

  await replyMessage(replyToken, [{ type: 'text', text: 'üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å' }]);
  await logEvent('register.request', { userId, id_card: null });
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
async function processIdCardInput(userId, idCard, replyToken) {
  if (!isValidIdCard(idCard)) {
    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
    ]);
    return;
  }

  // üîπ Query ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏≤‡∏Å HNOPD_MASTER + HNName (SQL Server)
  const sqlQuery = `
      DECLARE @date DATE = CAST(GETDATE() AS DATE);
      SELECT 
          N.HN,
          N.ID AS CID,
          N.InitialName,
          N.FirstName,
          N.LastName,
          N.BirthDateTime AS DOB,
          OM.DefaultRightCode AS DefaultRight,
          OM.VN
      FROM HNOPD_MASTER OM
      LEFT JOIN HNName N ON OM.HN = N.HN
      WHERE OM.VisitDate >= @date
        AND OM.VisitDate < DATEADD(DAY, 1, @date)
        AND N.ID = @id_card
      ORDER BY OM.VN ASC
  `;

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å queryDB1 ‡πÅ‡∏ö‡∏ö named parameter
  const userInfoRows = await queryDB1(sqlQuery, {
    id_card: { type: sqlServer.VarChar, value: idCard }
  });
  const userInfo = userInfoRows[0];
  const nameWithoutTitle = (userInfo.FirstName || '').replace(/^(‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)/, '').trim();
  const lastName = (userInfo.LastName || '').trim();

  if (!userInfo) {
    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' }
    ]);
    await logEvent('register.failed', { userId, id_card: idCard, reason: 'Not found in HNOPD_MASTER' });
    return;
  }

  // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB2 (MySQL)
  try {
    await queryDB2(
      'INSERT INTO line_registered_users (line_user_id, id_card, registered_at) VALUES (?, ?, NOW())',
      [userId, idCard]
    );

    await redisClient.del(`session:${userId}`);

    const tokenPayload = {
      lineUserId: userId,
      id_card: idCard,
      full_name: userInfo.FullName
    };
    const jwtToken = createToken(tokenPayload, '24h');

    await replyMessage(replyToken, [
      { 
        type: 'text', 
        text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${nameWithoutTitle} ${lastName}`
      }

      // { type: 'text', text: `üõ°Ô∏è Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏µ‡∏≠‡∏≠‡∏™‡∏Å‡πå:\n${jwtToken}` }
    ]);

    setTimeout(async () => {
      await pushMessage(userId, [
        { type: 'text', text: 'üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ú‡πà‡∏≤‡∏ô LINE OA ‡∏ô‡∏µ‡πâ' }
      ]);
    }, 2000);

    await logEvent('register.success', { userId, id_card: idCard, jwtToken });

  } catch (error) {
    console.error(error);
    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }
    ]);
    await logEvent('register.failed', { userId, id_card: idCard, reason: 'DB2 insert error' });
  }
}


module.exports = { startRegistration, processIdCardInput, replyMessage, pushMessage };
