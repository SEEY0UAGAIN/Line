const sqlServer = require('mssql');
const { queryDB1, queryDB2 } = require('../db');
const redisClient = require('../redisClient');
const { logEvent } = require('../auditLog');
const { isValidIdCard } = require('../utils/validation');
const { formatRightsMessage } = require('../utils/rightsMapper'); 
const axios = require('axios');
const { createToken } = require('../jwtHelper'); 
require('dotenv').config();

const LINE_MESSAGING_API = process.env.LINE_MESSAGING_API;
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Reply ‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
async function replyMessage(replyToken, messages, quickReplyItems = []) {
  try {
    const messagePayload = { replyToken, messages };
    if (quickReplyItems.length > 0) {
      messagePayload.messages[0].quickReply = { items: quickReplyItems };
    }
    await axios.post(
      `${LINE_MESSAGING_API}/reply`,
      messagePayload,
      { headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}` } }
    );
  } catch (error) {
    console.error('Error sending reply:', error.response?.data || error.message);
  }
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push
async function pushMessage(lineUserId, messages) {
  try {
    await axios.post(
      `${LINE_MESSAGING_API}/push`,
      { to: lineUserId, messages },
      { headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}` } }
    );
  } catch (error) {
    console.error('Error sending push message:', error.response?.data || error.message);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function checkUserRights(idCard) {
  const sqlQuery = `
    SELECT 
      R.RightCode,
      R.CompanyCode,
      R.ValidFrom,
      R.ValidTill
    FROM HNPAT_RIGHT R
    INNER JOIN HNPAT_INFO I ON R.HN = I.HN
    WHERE I.PrePatientNo = @id_card
      AND R.ValidFrom IS NOT NULL
      AND R.ValidTill IS NOT NULL
      AND GETDATE() BETWEEN R.ValidFrom AND R.ValidTill
    ORDER BY R.ValidFrom DESC;
  `;

  const rows = await queryDB1(sqlQuery, {
    id_card: { type: sqlServer.VarChar, value: idCard }
  });

  if (!rows.length) return [];

  // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Active ‡∏≠‡∏¢‡∏π‡πà
  const rights = rows.map(r => r.RightCode);
  return rights;
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏° registration ‚Üí ‡∏™‡πà‡∏á LIFF template ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
async function startRegistration(userId, replyToken) {
  const existing = await queryDB2(
    'SELECT id_card FROM line_registered_users WHERE line_user_id = ?',
    [userId]
  );

  let nameWithoutTitle = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
  let lastName = '';

  if (existing.length > 0) {
    const idCard = existing[0].id_card;

    const sqlQuery = `
      SELECT N.FirstName, N.LastName
      FROM HNOPD_MASTER OM
      LEFT JOIN HNName N ON OM.HN = N.HN
      WHERE N.ID = @id_card
      ORDER BY OM.VN ASC
    `;
    const userInfoRows = await queryDB1(sqlQuery, {
      id_card: { type: sqlServer.VarChar, value: idCard }
    });

    if (userInfoRows.length > 0) {
      nameWithoutTitle = (userInfoRows[0].FirstName || '').replace(/^(‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)/, '').trim();
      lastName = (userInfoRows[0].LastName || '').trim();
    }

    const welcomeMessage = `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${nameWithoutTitle} ${lastName}`;

    if (replyToken) {
      await replyMessage(replyToken, [
        { type: 'text', text: welcomeMessage }
      ]);
    } else {
      await pushMessage(userId, [
        { type: 'text', text: welcomeMessage }
      ]);
    }
    return;
  }

  const liffUrl = "https://liff.line.me/2008268424-1GqpgeO5";
  const message = [
    {
      type: "template",
      altText: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
      template: {
        type: "buttons",
        thumbnailImageUrl: "https://cdn-icons-png.flaticon.com/512/747/747376.png",
        title: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
        actions: [
          { type: "uri", label: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", uri: liffUrl }
        ]
      }
    }
  ];

  if (replyToken) {
    await replyMessage(replyToken, message);
  } else {
    await pushMessage(userId, [
      { type: 'text', text: '‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô' }
    ]);
  }
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
async function processIdCardInput(userId, idCard, replyToken) {
  if (!isValidIdCard(idCard)) {
    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
    ]);
    return;
  }

  const sqlQuery = `
    SELECT 
      N.HN,
      N.ID AS CID,
      N.InitialName,
      N.FirstName,
      N.LastName,
      N.BirthDateTime AS DOB,
      OM.DefaultRightCode AS DefaultRight,
      OM.VN
    FROM HNOPD_MASTER OM
    LEFT JOIN HNName N ON OM.HN = N.HN
    WHERE N.ID = @id_card
    ORDER BY OM.VN ASC
  `;

  const userInfoRows = await queryDB1(sqlQuery, {
    id_card: { type: sqlServer.VarChar, value: idCard }
  });
  const userInfo = userInfoRows[0];

  if (!userInfo) {
    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' }
    ]);
    await logEvent('register.failed', { userId, id_card: idCard, reason: 'Not found in HNOPD_MASTER' });
    return;
  }

  const nameWithoutTitle = (userInfo.FirstName || '').replace(/^(‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß)/, '').trim();
  const lastName = (userInfo.LastName || '').trim();

  try {
    await queryDB2(
      'INSERT INTO line_registered_users (line_user_id, id_card, full_name, hn, registered_at) VALUES (?, ?, ?, ?, NOW())',
      [userId, idCard, `${nameWithoutTitle} ${lastName}`, userInfo.HN]
    );

    await redisClient.del(`session:${userId}`);

    const tokenPayload = {
      lineUserId: userId,
      id_card: idCard,
      full_name: `${nameWithoutTitle} ${lastName}`
    };
    const jwtToken = createToken(tokenPayload, '24h');

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    if (replyToken) {
      await replyMessage(replyToken, [
        { type: 'text', text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${nameWithoutTitle} ${lastName}` }
      ]);
    } else {
      await pushMessage(userId, [
        { type: 'text', text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${nameWithoutTitle} ${lastName}` }
      ]);
    }

    // ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userRights = await checkUserRights(idCard);
    const rightsMessage = formatRightsMessage(userRights);

    await pushMessage(userId, [{ type: 'text', text: rightsMessage }]);

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(async () => {
      await pushMessage(userId, [
        { type: 'text', text: 'üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ú‡πà‡∏≤‡∏ô LINE OA ‡∏ô‡∏µ‡πâ' }
      ]);
    }, 2000);

    await logEvent('register.success', { userId, id_card: idCard, jwtToken });

  } catch (error) {
    console.error(error);
    if (error.code === 'ER_DUP_ENTRY') {
      const welcomeMessage = `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${nameWithoutTitle} ${lastName}`;
      if (replyToken) {
        await replyMessage(replyToken, [{ type: 'text', text: welcomeMessage }]);
      } else {
        await pushMessage(userId, [{ type: 'text', text: welcomeMessage }]);
      }
      await logEvent('register.failed', { userId, id_card: idCard, reason: 'Duplicate entry' });
      return;
    }

    await replyMessage(replyToken, [
      { type: 'text', text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }
    ]);
    await logEvent('register.failed', { userId, id_card: idCard, reason: 'DB2 insert error' });
  }
}

module.exports = { startRegistration, processIdCardInput, replyMessage, pushMessage, checkUserRights };
