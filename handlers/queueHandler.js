const redisClient = require('../redisClient');
const { sendLineMessage } = require('../utils/lineNotify');
const { v4: uuidv4 } = require('uuid');
const { logEvent } = require('../auditLog'); // import logEvent

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß
async function registerQueue(req, res) {
    const { vn, patient_name, queue_type, line_user_id } = req.body;
    if (!vn || !queue_type || !line_user_id) {
        return res.status(400).json({ error: 'Missing parameters' });
    }

    const queueKey = `queue:${vn}:${queue_type}`;
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ
    const queueNoKey = `queue_no:${queue_type}`;
    const queueData = {
        queue_no: await redisClient.incr(queueNoKey),
        queue_type,
        patient_name,
        line_user_id,
        status: 'waiting',
        created_at: Date.now()
    };

    await redisClient.set(queueKey, JSON.stringify(queueData), { EX: 24*3600 });

    // Audit log
    logEvent('queue.register', { vn, queue_type, queue_no: queueData.queue_no, line_user_id });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
    await sendLineMessage(line_user_id, `‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà ${queueData.queue_no} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${queue_type}`);

    res.json({ success: true, queue: queueData });
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
async function getQueueStatus(req, res) {
    try {
        const { vn, queue_type } = req.query;
        if (!vn || !queue_type) {
            return res.status(400).json({ error: 'Missing parameters: vn or queue_type' });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);

        if (!data) {
            await logEvent('queue.status.failed', { vn, queue_type });
            return res.status(404).json({ error: 'Queue not found' });
        }

        const queue = JSON.parse(data);

        // Audit log
        await logEvent('queue.status', { vn, queue_type, queue_no: queue.queue_no, line_user_id: queue.line_user_id });

        res.json({ success: true, queue });
    } catch (err) {
        console.error('getQueueStatus error:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡∏Ñ‡∏¥‡∏ß
async function updateQueueStatus(req, res) {
    try {
        const { vn, queue_type, status } = req.body;
        if (!vn || !queue_type || !status) {
            return res.status(400).json({ error: 'Missing parameters: vn, queue_type or status' });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);
        if (!data) {
            await logEvent('queue.update.failed', { vn, queue_type, status });
            return res.status(404).json({ error: 'Queue not found' });
        }

        const queue = JSON.parse(data);
        queue.status = status;

        await redisClient.set(queueKey, JSON.stringify(queue), { EX: 24*3600 });

        // Audit log
        await logEvent('queue.update', { vn, queue_type, queue_no: queue.queue_no, status, line_user_id: queue.line_user_id });

        // ‡∏™‡πà‡∏á LINE ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        let msg = '';
        if (status === 'called') msg = `üîî ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${queue_type}`;
        else if (status === 'done') msg = `‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ñ‡∏¥‡∏ß ${queue_type}`;
        else msg = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô ${status}`;

        await sendLineMessage(queue.line_user_id, msg);

        res.json({ success: true, queue });

    } catch (err) {
        console.error('updateQueueStatus error:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
}

module.exports = { registerQueue, getQueueStatus, updateQueueStatus };
