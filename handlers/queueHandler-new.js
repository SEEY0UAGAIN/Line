const redisClient = require('../redisClient');
const { sendLineMessage } = require('../utils/lineNotify');
const { logEvent } = require('../utils/auditLog');
const { queryDB1, queryDB2 } = require('../db');
const sqlServer = require('mssql');

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß
async function registerQueue(req, res) {
    try {
        const { vn, patient_name, queue_type, line_user_id } = req.body;
        
        if (!vn || !queue_type || !line_user_id) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing required parameters: vn, queue_type, or line_user_id' 
            });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingQueueKey = `queue:${vn}:${queue_type}`;
        const existingQueue = await redisClient.get(existingQueueKey);
        
        if (existingQueue) {
            const queue = JSON.parse(existingQueue);
            await logEvent('queue.duplicate', { 
                vn, 
                queue_type, 
                queue_no: queue.queue_no, 
                line_user_id 
            });
            
            return res.json({ 
                success: true, 
                queue,
                message: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
            });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å SSB ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤
        let patientName = patient_name;
        if (!patientName) {
            const patientQuery = `
                SELECT N.FirstName, N.LastName, N.InitialName
                FROM HNOPD_MASTER OM
                LEFT JOIN HNName N ON OM.HN = N.HN
                WHERE OM.VN = @vn
            `;
            const patientRows = await queryDB1(patientQuery, {
                vn: { type: sqlServer.VarChar, value: vn }
            });
            
            if (patientRows.length > 0) {
                const p = patientRows[0];
                patientName = `${p.InitialName || ''}${p.FirstName || ''} ${p.LastName || ''}`.trim();
            } else {
                patientName = '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢';
            }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ
        const queueNoKey = `queue_no:${queue_type}:${new Date().toISOString().split('T')[0]}`;
        const queueNo = await redisClient.incr(queueNoKey);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ expire ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô)
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 0, 0, 0);
        const ttl = Math.floor((tomorrow - new Date()) / 1000);
        await redisClient.expire(queueNoKey, ttl);

        const queueData = {
            queue_no: queueNo,
            vn,
            queue_type,
            patient_name: patientName,
            line_user_id,
            status: 'waiting',
            created_at: Date.now(),
            updated_at: Date.now()
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß
        await redisClient.set(existingQueueKey, JSON.stringify(queueData), { 
            EX: 24 * 3600 
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ List ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö FIFO
        const queueListKey = `queue_list:${queue_type}`;
        await redisClient.rPush(queueListKey, vn);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MySQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        await queryDB2(
            `INSERT INTO queue_history 
            (vn, queue_no, queue_type, patient_name, line_user_id, status, created_at) 
            VALUES (?, ?, ?, ?, ?, ?, NOW())`,
            [vn, queueNo, queue_type, patientName, line_user_id, 'waiting']
        );

        // Audit log
        await logEvent('queue.register', { 
            vn, 
            queue_type, 
            queue_no: queueNo, 
            line_user_id,
            patient_name: patientName
        });

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        const waitingCount = await getWaitingCount(queue_type);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
        const lineMessage = `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queueNo}
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${patientName}
‚è±Ô∏è ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤: ${waitingCount} ‡∏Ñ‡∏ô

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`;

        await sendLineMessage(line_user_id, lineMessage);

        res.json({ 
            success: true, 
            queue: queueData,
            waiting_count: waitingCount
        });

    } catch (err) {
        console.error('registerQueue error:', err);
        await logEvent('queue.register.error', { 
            error: err.message,
            body: req.body
        });
        res.status(500).json({ 
            success: false,
            error: 'Internal server error',
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß'
        });
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
async function getQueueStatus(req, res) {
    try {
        const { vn, queue_type, line_user_id } = req.query;
        
        if (!vn || !queue_type) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing parameters: vn or queue_type' 
            });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);

        if (!data) {
            await logEvent('queue.status.notfound', { vn, queue_type, line_user_id });
            return res.status(404).json({ 
                success: false,
                error: 'Queue not found',
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'
            });
        }

        const queue = JSON.parse(data);

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        const waitingCount = await getWaitingCountBefore(queue_type, vn);

        // Audit log
        await logEvent('queue.status', { 
            vn, 
            queue_type, 
            queue_no: queue.queue_no, 
            status: queue.status,
            line_user_id: queue.line_user_id 
        });

        res.json({ 
            success: true, 
            queue,
            waiting_count: waitingCount,
            estimated_wait_time: waitingCount * 5 // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô
        });

    } catch (err) {
        console.error('getQueueStatus error:', err);
        res.status(500).json({ 
            success: false,
            error: 'Internal server error' 
        });
    }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡∏Ñ‡∏¥‡∏ß
async function updateQueueStatus(req, res) {
    try {
        const { vn, queue_type, status, updated_by } = req.body;
        
        if (!vn || !queue_type || !status) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing parameters: vn, queue_type or status' 
            });
        }

        const validStatuses = ['waiting', 'called', 'serving', 'done', 'cancelled', 'no_show'];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({ 
                success: false,
                error: 'Invalid status',
                message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);
        
        if (!data) {
            await logEvent('queue.update.notfound', { vn, queue_type, status });
            return res.status(404).json({ 
                success: false,
                error: 'Queue not found',
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß'
            });
        }

        const queue = JSON.parse(data);
        const oldStatus = queue.status;
        queue.status = status;
        queue.updated_at = Date.now();
        queue.updated_by = updated_by || 'system';

        await redisClient.set(queueKey, JSON.stringify(queue), { EX: 24 * 3600 });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô MySQL
        await queryDB2(
            `UPDATE queue_history 
            SET status = ?, updated_at = NOW(), updated_by = ? 
            WHERE vn = ? AND queue_type = ? AND DATE(created_at) = CURDATE()`,
            [status, queue.updated_by, vn, queue_type]
        );

        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue list ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        if (status === 'done' || status === 'cancelled' || status === 'no_show') {
            const queueListKey = `queue_list:${queue_type}`;
            await redisClient.lRem(queueListKey, 1, vn);
        }

        // Audit log
        await logEvent('queue.update', { 
            vn, 
            queue_type, 
            queue_no: queue.queue_no, 
            old_status: oldStatus,
            new_status: status, 
            updated_by: queue.updated_by,
            line_user_id: queue.line_user_id 
        });

        // ‡∏™‡πà‡∏á LINE ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        const lineMessage = getStatusMessage(status, queue);
        await sendLineMessage(queue.line_user_id, lineMessage);

        res.json({ 
            success: true, 
            queue,
            message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });

    } catch (err) {
        console.error('updateQueueStatus error:', err);
        res.status(500).json({ 
            success: false,
            error: 'Internal server error' 
        });
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
async function callNextQueue(req, res) {
    try {
        const { queue_type, counter_no, staff_name } = req.body;
        
        if (!queue_type) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing queue_type parameter' 
            });
        }

        const queueListKey = `queue_list:${queue_type}`;
        const vn = await redisClient.lPop(queueListKey);

        if (!vn) {
            return res.json({ 
                success: false,
                message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠',
                queue: null
            });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);

        if (!data) {
            return res.status(404).json({ 
                success: false,
                error: 'Queue data not found' 
            });
        }

        const queue = JSON.parse(data);
        queue.status = 'called';
        queue.counter_no = counter_no;
        queue.staff_name = staff_name;
        queue.called_at = Date.now();
        queue.updated_at = Date.now();

        await redisClient.set(queueKey, JSON.stringify(queue), { EX: 24 * 3600 });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô MySQL
        await queryDB2(
            `UPDATE queue_history 
            SET status = 'called', counter_no = ?, staff_name = ?, called_at = NOW(), updated_at = NOW()
            WHERE vn = ? AND queue_type = ? AND DATE(created_at) = CURDATE()`,
            [counter_no, staff_name, vn, queue_type]
        );

        await logEvent('queue.call', { 
            vn, 
            queue_type, 
            queue_no: queue.queue_no,
            counter_no,
            staff_name
        });

        // ‡∏™‡πà‡∏á LINE ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß
        const lineMessage = `üîî ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}
üè¢ ‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${counter_no || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠'}
üë®‚Äç‚öïÔ∏è ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ${staff_name || '-'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞`;

        await sendLineMessage(queue.line_user_id, lineMessage);

        res.json({ 
            success: true, 
            queue,
            message: '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });

    } catch (err) {
        console.error('callNextQueue error:', err);
        res.status(500).json({ 
            success: false,
            error: 'Internal server error' 
        });
    }
}

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getAllQueues(req, res) {
    try {
        const { queue_type, status } = req.query;
        
        if (!queue_type) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing queue_type parameter' 
            });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MySQL
        let query = `
            SELECT * FROM queue_history 
            WHERE queue_type = ? AND DATE(created_at) = CURDATE()
        `;
        const params = [queue_type];

        if (status) {
            query += ' AND status = ?';
            params.push(status);
        }

        query += ' ORDER BY queue_no ASC';

        const queues = await queryDB2(query, params);

        res.json({ 
            success: true, 
            queues,
            count: queues.length
        });

    } catch (err) {
        console.error('getAllQueues error:', err);
        res.status(500).json({ 
            success: false,
            error: 'Internal server error' 
        });
    }
}

// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏¥‡∏ß
async function cancelQueue(req, res) {
    try {
        const { vn, queue_type, line_user_id, reason } = req.body;
        
        if (!vn || !queue_type) {
            return res.status(400).json({ 
                success: false,
                error: 'Missing parameters' 
            });
        }

        const queueKey = `queue:${vn}:${queue_type}`;
        const data = await redisClient.get(queueKey);

        if (!data) {
            return res.status(404).json({ 
                success: false,
                error: 'Queue not found' 
            });
        }

        const queue = JSON.parse(data);
        queue.status = 'cancelled';
        queue.cancelled_reason = reason;
        queue.updated_at = Date.now();

        await redisClient.set(queueKey, JSON.stringify(queue), { EX: 24 * 3600 });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô MySQL
        await queryDB2(
            `UPDATE queue_history 
            SET status = 'cancelled', cancelled_reason = ?, updated_at = NOW()
            WHERE vn = ? AND queue_type = ? AND DATE(created_at) = CURDATE()`,
            [reason, vn, queue_type]
        );

        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue list
        const queueListKey = `queue_list:${queue_type}`;
        await redisClient.lRem(queueListKey, 1, vn);

        await logEvent('queue.cancel', { 
            vn, 
            queue_type, 
            queue_no: queue.queue_no,
            reason,
            line_user_id: queue.line_user_id
        });

        const lineMessage = `‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}

${reason ? `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}` : ''}`;

        await sendLineMessage(queue.line_user_id, lineMessage);

        res.json({ 
            success: true, 
            queue,
            message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        });

    } catch (err) {
        console.error('cancelQueue error:', err);
        res.status(500).json({ 
            success: false,
            error: 'Internal server error' 
        });
    }
}

// Helper Functions
async function getWaitingCount(queueType) {
    const queueListKey = `queue_list:${queueType}`;
    return await redisClient.lLen(queueListKey);
}

async function getWaitingCountBefore(queueType, vn) {
    const queueListKey = `queue_list:${queueType}`;
    const position = await redisClient.lPos(queueListKey, vn);
    return position !== null ? position : 0;
}

function getQueueTypeLabel(queueType) {
    const labels = {
        'pharmacy': '‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏≤',
        'lab': '‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö',
        'xray': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πÄ‡∏£‡∏¢‡πå',
        'doctor': '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à',
        'cashier': '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'
    };
    return labels[queueType] || queueType;
}

function getStatusMessage(status, queue) {
    const messages = {
        'waiting': `‚è≥ ‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`,

        'called': `üîî ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}
${queue.counter_no ? `üè¢ ‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${queue.counter_no}` : ''}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞`,

        'serving': `üë®‚Äç‚öïÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}`,

        'done': `‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞`,

        'cancelled': `‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}`,

        'no_show': `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î

üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${getQueueTypeLabel(queue.queue_type)}
üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: ${queue.queue_no}

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà`
    };

    return messages[status] || `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô ${status}`;
}

module.exports = { 
    registerQueue, 
    getQueueStatus, 
    updateQueueStatus,
    callNextQueue,
    getAllQueues,
    cancelQueue
};