/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Pharmacy Queue Monitor
 * ‡∏£‡∏±‡∏ô: node testPharmacyMonitor.js
 */
const TARGET_DATE = process.env.TEST_DATE || null;
const sqlServer = require('mssql');
const { queryDB1, queryDB2 } = require('./db');
require('dotenv').config();

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// ===== TEST 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =====
async function test1_DatabaseConnection() {
  log('cyan', '\n========== TEST 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ==========');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MySQL
    const mysqlResult = await queryDB2('SELECT 1 as test');
    if (mysqlResult[0].test === 1) {
      log('green', '‚úÖ MySQL connection: OK');
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SQL Server
    const ssbResult = await queryDB1('SELECT 1 as test');
    if (ssbResult[0].test === 1) {
      log('green', '‚úÖ SQL Server (SSB) connection: OK');
    }

    return true;
  } catch (error) {
    log('red', '‚ùå Database connection failed:');
    console.error(error);
    return false;
  }
}

// ===== TEST 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å SSB =====
async function test2_FetchQueueFromSSB(testDate = null) {
  log('cyan', '\n========== TEST 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å SSB ==========');
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  let dateCondition = 'CONVERT(DATE, OM.VisitDate) = CONVERT(DATE, GETDATE())';
  if (testDate) {
    dateCondition = `CONVERT(DATE, OM.VisitDate) = '${testDate}'`;
    log('yellow', `üóìÔ∏è  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${testDate}`);
  } else {
    log('blue', 'üóìÔ∏è  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
  }
  
  try {
    const sql = `
      WITH QueueData AS (
        SELECT 
          OM.VN,
          OM.HN,
          OM.VisitDate,
          OP.DrugAcknowledge,
          OP.DrugReady,
          SUBSTRING(N.FirstName, 2, 100) + ' ' + SUBSTRING(N.LastName, 2, 100) AS PatientName,
          (SELECT ISNULL(SUBSTRING(LocalName, 2, 1000), SUBSTRING(EnglishName, 2, 1000))
           FROM DNSYSCONFIG 
           WHERE CtrlCode = '42203' AND code = OP.Clinic) AS ClinicName,
          MAX(CASE WHEN PM.StockCode = 'NODRUG' THEN 1 ELSE 0 END) AS HasNoDrug,
          CASE 
            WHEN OP.DrugAcknowledge=1 AND OP.DrugReady=0 THEN '‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏¢‡∏≤'
            WHEN OP.DrugAcknowledge=1 AND OP.DrugReady=1 THEN '‡∏à‡∏±‡∏î‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
          END AS MedicineStatus
        FROM HNOPD_MASTER OM WITH (NOLOCK)
        INNER JOIN HNOPD_PRESCRIP OP 
          ON OM.VisitDate = OP.VisitDate AND OM.VN = OP.VN
        LEFT JOIN HNOPD_PRESCRIP_MEDICINE PM 
          ON OP.VisitDate = PM.VisitDate 
          AND OP.VN = PM.VN 
          AND OP.PrescriptionNo = PM.PrescriptionNo
          AND PM.CxlDateTime IS NULL
        LEFT JOIN HNName N ON OM.HN = N.HN
        LEFT JOIN HNOPD_RECEIVE_HEADER RH 
          ON OM.VisitDate = RH.VisitDate AND OM.VN = RH.VN
        WHERE OM.Cxl = 0
          AND ${dateCondition}
          AND OP.DrugAcknowledge = 1
          AND OM.OutDateTime IS NULL
          AND OP.CloseVisitCode IS NOT NULL
          AND OP.CloseVisitCode NOT IN ('ADM','C01','C02','C03','C04','C05','C06','C07','C08','C09','C10','C11','C12','C13','C14','C15')
          AND RH.ReceiptNo IS NULL
        GROUP BY 
          OM.VN, OM.HN, OM.VisitDate, OP.DrugAcknowledge, OP.DrugReady,
          N.FirstName, N.LastName, OP.Clinic
      )
      SELECT TOP 10 *
      FROM QueueData
      ORDER BY VN DESC
    `;

    const rows = await queryDB1(sql);
    
    if (rows.length > 0) {
      log('green', `‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log('\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
      
      const uniqueVNs = [...new Set(rows.map(r => r.VN))];
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô VN ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô: ${uniqueVNs.length}`);
      
      rows.forEach((row, index) => {
        const visitDate = new Date(row.VisitDate).toLocaleDateString('th-TH');
        console.log(`\n${index + 1}. VN: ${row.VN} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${visitDate})`);
        console.log(`   HN: ${row.HN}`);
        console.log(`   ‡∏ä‡∏∑‡πà‡∏≠: ${row.PatientName}`);
        console.log(`   ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å: ${row.ClinicName || '-'}`);
        console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${row.MedicineStatus}`);
        console.log(`   DrugAcknowledge: ${row.DrugAcknowledge}, DrugReady: ${row.DrugReady}`);
      });
      return rows;
    } else {
      log('yellow', `‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${testDate || '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'}`);
      return [];
    }
  } catch (error) {
    log('red', '‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSB ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return [];
  }
}

// ===== TEST 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID =====
async function test3_FindLineUserId(vn, hn) {
  log('cyan', `\n========== TEST 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID (VN: ${vn}) ==========`);
  
  try {
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å HN
    let result = await queryDB2(
      'SELECT line_user_id, full_name FROM line_registered_users WHERE hn = ? LIMIT 1',
      [hn]
    );

    if (result.length > 0) {
      log('green', `‚úÖ ‡∏û‡∏ö LINE User ID ‡∏à‡∏≤‡∏Å HN: ${hn}`);
      console.log(`   User ID: ${result[0].line_user_id}`);
      console.log(`   ‡∏ä‡∏∑‡πà‡∏≠: ${result[0].full_name}`);
      return result[0].line_user_id;
    }

    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å ID Card
    const ssbQuery = `
      SELECT N.ID 
      FROM HNOPD_MASTER OM
      LEFT JOIN HNName N ON OM.HN = N.HN
      WHERE OM.VN = @vn
    `;
    const ssbRows = await queryDB1(ssbQuery, {
      vn: { type: sqlServer.VarChar, value: vn }
    });

    if (ssbRows.length > 0) {
      const idCard = ssbRows[0].ID;
      result = await queryDB2(
        'SELECT line_user_id, full_name FROM line_registered_users WHERE id_card = ? LIMIT 1',
        [idCard]
      );
      
      if (result.length > 0) {
        log('green', `‚úÖ ‡∏û‡∏ö LINE User ID ‡∏à‡∏≤‡∏Å ID Card: ${idCard}`);
        console.log(`   User ID: ${result[0].line_user_id}`);
        console.log(`   ‡∏ä‡∏∑‡πà‡∏≠: ${result[0].full_name}`);
        return result[0].line_user_id;
      }
    }

    log('yellow', `‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VN: ${vn}`);
    log('yellow', '   (‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô LINE OA)');
    return null;
  } catch (error) {
    log('red', '‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return null;
  }
}

// ===== TEST 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß =====
async function test4_InsertQueueTracking(vn, lineUserId, status) {
  log('cyan', `\n========== TEST 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß ==========`);
  
  try {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    await queryDB2('DELETE FROM pharmacy_queue_tracking WHERE vn = ?', [vn]);

    // Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    await queryDB2(
      `INSERT INTO pharmacy_queue_tracking 
       (vn, line_user_id, status, notified_waiting) 
       VALUES (?, ?, ?, 1)`,
      [vn, lineUserId, status]
    );

    log('green', `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    console.log(`   VN: ${vn}`);
    console.log(`   Status: ${status}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const result = await queryDB2(
      'SELECT * FROM pharmacy_queue_tracking WHERE vn = ?',
      [vn]
    );

    if (result.length > 0) {
      console.log('\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:');
      console.log(result[0]);
      return true;
    }
  } catch (error) {
    log('red', '‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

// ===== TEST 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE (Dry Run) =====
async function test5_TestLineMessage(lineUserId, vn) {
  log('cyan', '\n========== TEST 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ==========');
  
  try {
    const { sendLineMessage } = require('./utils/lineNotify');
    
    const testMessage = `üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏¢‡∏≤

üìã VN: ${vn}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}

‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‚úÖ`;

    await sendLineMessage(lineUserId, testMessage);
    
    log('green', '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÅ‡∏•‡πâ‡∏ß');
    log('yellow', '   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà LINE OA ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
    return true;
  } catch (error) {
    log('red', '‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
    return false;
  }
}

// ===== TEST 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Full Flow =====
async function test6_FullFlow(testDate = null) {
  log('cyan', '\n========== TEST 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Full Flow ==========');
  
  try {
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å SSB
    log('blue', '\n1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å SSB...');
    const queueData = await test2_FetchQueueFromSSB(testDate);
    
    if (queueData.length === 0) {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      return;
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å VN ‡πÅ‡∏£‡∏Å
    const testItem = queueData[0];
    log('blue', `\n2. ‡πÉ‡∏ä‡πâ VN: ${testItem.VN} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö`);

    // 2. ‡∏´‡∏≤ LINE User ID
    log('blue', '\n3. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LINE User ID...');
    const lineUserId = await test3_FindLineUserId(testItem.VN, testItem.HN);
    
    if (!lineUserId) {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ');
      log('yellow', '   (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)');
      return;
    }

    // 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    log('blue', '\n4. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SSB...');
    let status = 'waiting_medicine';
    if (testItem.DrugReady === 1) {
      status = 'medicine_ready';
    }
    console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${status}`);

    // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß
    log('blue', '\n5. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß...');
    await test4_InsertQueueTracking(testItem.VN, lineUserId, status);

    // 5. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    log('blue', '\n6. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô...');
    await test5_TestLineMessage(lineUserId, testItem.VN);

    log('green', '\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Full Flow ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    log('yellow', '\nüì± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà LINE OA ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
  } catch (error) {
    log('red', '\n‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Full Flow ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    console.error(error);
  }
}

// ===== TEST 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Call Queue =====
async function test7_TestCallQueueAPI() {
  log('cyan', '\n========== TEST 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Call Queue ==========');
  
  try {
    const axios = require('axios');
    const PORT = process.env.PORT || 3000;
    
    // ‡∏´‡∏≤ VN ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ medicine_ready
    const result = await queryDB2(
      'SELECT vn FROM pharmacy_queue_tracking WHERE status = "medicine_ready" LIMIT 1'
    );

    if (result.length === 0) {
      log('yellow', '‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ medicine_ready');
      log('yellow', '   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏±‡∏ô test6_FullFlow)');
      return;
    }

    const testVN = result[0].vn;
    log('blue', `\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß VN: ${testVN}`);

    const response = await axios.post(`http://localhost:${PORT}/api/call-pharmacy-queue`, {
      vn: testVN
    });

    if (response.data.success) {
      log('green', '‚úÖ API Call Queue ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      log('yellow', 'üì± ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà LINE OA ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
    } else {
      log('red', `‚ùå API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.data.message}`);
    }
  } catch (error) {
    log('red', '‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    if (error.response) {
      console.error('Response error:', error.response.data);
    } else if (error.code === 'ECONNREFUSED') {
      log('red', '   Server ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: npm start');
    } else {
      console.error(error.message);
    }
  }
}

// ===== ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å =====
async function runTests() {
  console.log('\n' + '='.repeat(60));
  log('cyan', 'üß™ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Pharmacy Queue Monitor');
  console.log('='.repeat(60));

  const args = process.argv.slice(2);
  
  // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å argument --date=2025-01-10
  let testDate = null;
  const dateArg = args.find(arg => arg.startsWith('--date='));
  if (dateArg) {
    testDate = dateArg.split('=')[1];
    log('yellow', `\nüìÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${testDate}`);
  }
  
  if (args.includes('--all')) {
    // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å test
    await test1_DatabaseConnection();
    await test2_FetchQueueFromSSB(testDate);
    await test6_FullFlow(testDate);
  } else if (args.includes('--quick')) {
    // ‡∏£‡∏±‡∏ô quick test
    await test1_DatabaseConnection();
    const queueData = await test2_FetchQueueFromSSB(testDate);
    if (queueData.length > 0) {
      await test3_FindLineUserId(queueData[0].VN, queueData[0].HN);
    }
  } else if (args.includes('--api')) {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
    await test7_TestCallQueueAPI();
  } else {
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
    console.log('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('  node testPharmacyMonitor.js --quick              # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô');
    console.log('  node testPharmacyMonitor.js --all                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('  node testPharmacyMonitor.js --all --date=2025-01-10  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 10 ‡∏°.‡∏Ñ. 68');
    console.log('  node testPharmacyMonitor.js --quick --date=2025-01-10');
    console.log('  node testPharmacyMonitor.js --api                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Call Queue');
    
    // ‡∏£‡∏±‡∏ô quick test ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    log('blue', '\nüí° ‡∏£‡∏±‡∏ô Quick Test ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...\n');
    await test1_DatabaseConnection();
    await test2_FetchQueueFromSSB(testDate);
  }

  console.log('\n' + '='.repeat(60));
  log('cyan', '‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  console.log('='.repeat(60) + '\n');
  
  process.exit(0);
}

// Run
runTests().catch(error => {
  log('red', '\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:');
  console.error(error);
  process.exit(1);
});